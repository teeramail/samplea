"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import React from "react";
import { api } from "~/trpc/react";
import Image from "next/image";

type PageProps = {
  params: Promise<{ id: string }>;
};

export default function ViewEventTemplatePage({ params }: PageProps) {
  // Unwrap params using React.use() to access properties safely
  const unwrappedParams = React.use(params);
  const id = unwrappedParams.id;
  const [isLoading, setIsLoading] = useState(true);

  // Fetch the event template data
  const { data: template, error, isLoading: isQueryLoading } = api.eventTemplate.getById.useQuery(
    { id }
  );

  // Update loading state when data is fetched
  useEffect(() => {
    if (!isQueryLoading) {
      setIsLoading(false);
    }
  }, [isQueryLoading]);

  // Format time to display in 12-hour format with AM/PM
  const formatTime = (time: string | null | undefined) => {
    if (!time) return "";
    
    // Ensure time is in HH:MM format
    const timeRegex = /^([01]?\d|2[0-3]):([0-5]\d)$/;
    const timeMatch = timeRegex.exec(time);
    if (!timeMatch || !timeMatch[1] || !timeMatch[2]) return time;
    
    // Now we can safely use these values as they're guaranteed to exist
    const hours = timeMatch[1];
    const minutes = timeMatch[2];
    const hour = parseInt(hours, 10);
    const ampm = hour >= 12 ? "PM" : "AM";
    const formattedHour = hour % 12 || 12;
    
    return `${formattedHour}:${minutes} ${ampm}`;
  };

  // Format days of week
  const formatDaysOfWeek = (days: number[] | undefined) => {
    if (!days || !Array.isArray(days)) return "";
    
    const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    return days.map(day => typeof day === 'number' && day >= 0 && day < 7 ? dayNames[day] : "").join(", ");
  };
  
  // Format days of month for monthly recurrence
  const formatDaysOfMonth = (days: number[] | undefined) => {
    if (!days || !Array.isArray(days) || days.length === 0) return "";
    
    // Sort the days numerically
    const sortedDays = [...days].sort((a, b) => a - b);
    
    // Format with proper ordinal suffixes (1st, 2nd, 3rd, etc.)
    return sortedDays.map(day => {
      const suffix = day === 1 || day === 21 || day === 31 ? 'st' : 
                   day === 2 || day === 22 ? 'nd' : 
                   day === 3 || day === 23 ? 'rd' : 'th';
      return `${day}${suffix}`;
    }).join(", ");
  };
  
  // Get recurrence type description
  const getRecurrenceDescription = (template: any) => {
    if (!template) return "No recurrence pattern set";
    
    const recurrenceType = template.recurrenceType || 'weekly'; // Default to weekly for backward compatibility
    
    if (recurrenceType === 'none') {
      return "No recurrence pattern (one-time event)";
    } else if (recurrenceType === 'weekly' && Array.isArray(template.recurringDaysOfWeek)) {
      return `Weekly on ${formatDaysOfWeek(template.recurringDaysOfWeek)}`;
    } else if (recurrenceType === 'monthly' && Array.isArray(template.dayOfMonth)) {
      return `Monthly on the ${formatDaysOfMonth(template.dayOfMonth)} of each month`;
    } else {
      return "Recurrence pattern not properly configured";
    }
  };

  if (isLoading) {
    return (
      <div className="flex h-64 items-center justify-center">
        <div className="text-lg font-medium text-gray-500">Loading...</div>
      </div>
    );
  }

  if (error || !template) {
    return (
      <div className="rounded-lg bg-red-50 p-4 text-red-800">
        <h3 className="text-lg font-medium">Error</h3>
        <p>{error?.message || "Event template not found"}</p>
        <div className="mt-4">
          <Link
            href="/admin/event-templates"
            className="rounded bg-red-600 px-4 py-2 text-white hover:bg-red-700"
          >
            Back to Templates
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-gray-900">{template.templateName}</h1>
        <div className="flex space-x-3">
          <Link
            href={`/admin/event-templates/${id}/edit`}
            className="rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
          >
            Edit Template
          </Link>
          <Link
            href="/admin/event-templates"
            className="rounded bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300"
          >
            Back to Templates
          </Link>
        </div>
      </div>

      <div className="overflow-hidden rounded-lg bg-white shadow">
        <div className="px-4 py-5 sm:p-6">
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
            {/* Thumbnail Image - if venue has one, show it */}
            {template.venue?.thumbnailUrl && (
              <div className="md:col-span-2">
                <h3 className="text-lg font-medium leading-6 text-gray-900">
                  Venue Thumbnail
                </h3>
                <div className="mt-4">
                  <div className="relative h-64 w-full overflow-hidden rounded-lg">
                    <Image
                      src={template.venue.thumbnailUrl}
                      alt={template.venue.name}
                      fill
                      style={{ objectFit: 'cover' }}
                      className="rounded-lg"
                    />
                  </div>
                </div>
              </div>
            )}

            {/* Basic Information */}
            <div>
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Basic Information
              </h3>
              <div className="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-2">
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Template Name</h4>
                  <p className="mt-1 text-sm text-gray-900">{template.templateName}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Region</h4>
                  <p className="mt-1 text-sm text-gray-900">{template.region?.name || "—"}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Venue</h4>
                  <p className="mt-1 text-sm text-gray-900">{template.venue?.name || "—"}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Default Title Format</h4>
                  <p className="mt-1 text-sm text-gray-900">{template.defaultTitleFormat}</p>
                </div>
                <div className="sm:col-span-2">
                  <h4 className="text-sm font-medium text-gray-500">Description</h4>
                  <p className="mt-1 text-sm text-gray-900">
                    {template.defaultDescription ?? "No description"}
                  </p>
                </div>
              </div>
            </div>

            {/* Template Status */}
            <div>
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Template Status
              </h3>
              <div className="mt-4">
                <div className="flex items-center">
                  <span className={`inline-flex items-center rounded-full px-3 py-1 text-sm font-medium ${template.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                    {template.isActive ? 'Active' : 'Inactive'}
                  </span>
                  <span className="ml-2 text-sm text-gray-500">
                    {template.isActive ? 'This template will generate events automatically' : 'This template will not generate events'}
                  </span>
                </div>
              </div>
            </div>

            {/* Recurrence Information */}
            <div>
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Recurrence Pattern
              </h3>
              <div className="mt-4 rounded-md bg-blue-50 p-4">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-blue-800">{getRecurrenceDescription(template)}</h3>
                    <div className="mt-2 text-sm text-blue-700">
                      <p>Default start time: {formatTime(template.defaultStartTime) || "Not set"}</p>
                      <p>Default end time: {formatTime(template.defaultEndTime) || "Not set"}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Scheduling Information */}
            <div className="md:col-span-2">
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Scheduling Information
              </h3>
              <div className="mt-4 grid grid-cols-1 gap-4 sm:grid-cols-3">
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Default Start Time</h4>
                  <p className="mt-1 text-sm text-gray-900">{formatTime(template.defaultStartTime) || "—"}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Default End Time</h4>
                  <p className="mt-1 text-sm text-gray-900">{formatTime(template.defaultEndTime) || "—"}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-500">Recurrence Type</h4>
                  <p className="mt-1 text-sm text-gray-900 capitalize">{template.recurrenceType || "weekly"}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Ticket Types */}
          <div className="mt-8">
            <h3 className="text-lg font-medium leading-6 text-gray-900">
              Default Ticket Types
            </h3>
            {template.templateTickets && template.templateTickets.length > 0 ? (
              <div className="mt-4 overflow-hidden rounded-lg border">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
                      >
                        Seat Type
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
                      >
                        Price
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
                      >
                        Capacity
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500"
                      >
                        Description
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200 bg-white">
                    {template.templateTickets.map((ticket) => (
                      <tr key={ticket.id}>
                        <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">
                          {ticket.seatType}
                        </td>
                        <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                          ${ticket.defaultPrice.toFixed(2)}
                        </td>
                        <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                          {ticket.defaultCapacity}
                        </td>
                        <td className="px-6 py-4 text-sm text-gray-500">
                          {ticket.defaultDescription ?? "—"}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="mt-4 rounded-md bg-yellow-50 p-4">
                <div className="flex">
                  <div className="text-yellow-800">
                    <p>No ticket types defined for this template.</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
